import os
import re
import shutil

INCLUDE_DIR = "include/crosstalk"
DIST_DIR = "dist"
OUTPUT_HEADER = "crosstalk.hpp"
HEADERS = ["refl.hpp", "endian.hpp", "serial_abstraction.hpp", "crosstalker.hpp"]


def strip_includes(content, to_strip):
    # Remove #include "refl.hpp" and #include "serial_communicator.hpp"
    pattern = re.compile(r'#include\s+"({})"'.format('|'.join(map(re.escape, to_strip))))
    lines = []
    for line in content.splitlines():
        if not pattern.search(line):
            lines.append(line)
    return "\n".join(lines)

def main():
    os.makedirs(DIST_DIR, exist_ok=True)
    headers = HEADERS
    merged = []
    merged.append("// This file is auto-generated by build.py. Do not edit manually.")
    merged.append("""// License: MIT License
// Individual MIT license headers and attributions for each file are included in the merged output.
// This header was developed by Stefan Fabian using the refl-cpp library by Veselin Karaganev
""")
    merged.append("#ifndef CROSSTALK_HPP_INCLUDED")
    merged.append("#define CROSSTALK_HPP_INCLUDED")
    merged.append("")
    for header in headers:
        print(header)
        path = os.path.join(INCLUDE_DIR, header)
        with open(path, "r") as f:
            content = f.read()
        # Remove includes to refl.hpp and serial_communicator.hpp
        content = strip_includes(content, HEADERS)
        merged.append(f"// --- {header.lstrip(INCLUDE_DIR)} ---")
        merged.append(content.strip())
        merged.append("")
    merged.append("#endif // CROSSTALK_HPP_INCLUDED")
    out_path = os.path.join(DIST_DIR, OUTPUT_HEADER)
    with open(out_path, "w") as f:
        f.write("\n".join(merged))
    print(f"Merged header written to {out_path}")
    print("Copying abstractions")
    os.makedirs(os.path.join(DIST_DIR, "serial_abstractions"), exist_ok=True)
    for file in os.listdir(os.path.join(INCLUDE_DIR, "serial_abstractions")):
        if file.endswith(".hpp"):
            src_path = os.path.join(INCLUDE_DIR, "serial_abstractions", file)
            dst_path = os.path.join(DIST_DIR, "serial_abstractions", file)
            shutil.copy(src_path, dst_path)
            print(f"Copied {file} to {dst_path}")

if __name__ == "__main__":
    main()
